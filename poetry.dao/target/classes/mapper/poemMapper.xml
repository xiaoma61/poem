<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.poetry.dao.PoemMapper">
  <resultMap id="BaseResultMap" type="com.poetry.pojo.Do.poemDo">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="dynasty" jdbcType="VARCHAR" property="dynasty" />
    <result column="author" jdbcType="VARCHAR" property="author" />
    <result column="poem_content" jdbcType="VARCHAR" property="poemContent" />
    <result column="poem_appreciation" jdbcType="VARCHAR" property="poemAppreciation" />
    <result column="poem_translation" jdbcType="VARCHAR" property="poemTranslation" />
    <result column="poemcol" jdbcType="VARCHAR" property="poemcol" />
  </resultMap>
  <resultMap id="PeopleRegisterDtoBaseResultMap" type="com.poetry.pojo.Dto.PeopleRegisterDto">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="dynasty" jdbcType="VARCHAR" property="dynasty" />
    <result column="author" jdbcType="VARCHAR" property="author" />
    <result column="poem_content" jdbcType="VARCHAR" property="poemContent" />
    <result column="poemcol" jdbcType="VARCHAR" property="poemcol" />
  </resultMap>

  <resultMap id="PoemDtoBaseResultMap" type="com.poetry.pojo.Dto.PoemDto">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="dynasty" jdbcType="VARCHAR" property="dynasty" />
    <result column="author" jdbcType="VARCHAR" property="author" />
    <result column="poem_content" jdbcType="VARCHAR" property="poemContent" />
    <result column="poemcol" jdbcType="VARCHAR" property="poemcol" />
    <result column="readNum" jdbcType="INTEGER" property="readNum" />
    <result column="likeNum" jdbcType="INTEGER" property="likeNum" />
    <result column="readCommentNum" jdbcType="INTEGER" property="readCommentNum" />

  </resultMap>

  <resultMap id="PoemTypeDtoResultMap" type="com.poetry.pojo.Dto.PoemTypeDto">

    <result column="poem_type_name" jdbcType="VARCHAR" property="poemTypeName" />

    <result column="poem_type_id" jdbcType="INTEGER" property="poemTypeId" />

    <collection property="poemDto" resultMap="PoemDtoBaseResultMap"></collection>

  </resultMap>

  <resultMap id="LikeCollectionTypeBaseResultMap" type="com.poetry.pojo.Dto.LikeCollectionTypeDto">
    <result column="typeNum" jdbcType="INTEGER" property="typeNum"></result>
    <result column="typeNumName" jdbcType="VARCHAR" property="typeNumName"></result>
  </resultMap>

  <resultMap id="LikesCollectionDtoResultMap" type="com.poetry.pojo.Dto.LikeCollectionDto">
    <result column="type" jdbcType="VARCHAR" property="type" />
  </resultMap>


  <resultMap id="PoemLikeCollectionDtoResultMap" type="com.poetry.pojo.Dto.PoemLikeCollectionDto">

    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="dynasty" jdbcType="VARCHAR" property="dynasty" />
    <result column="author" jdbcType="VARCHAR" property="author" />
    <result column="poem_content" jdbcType="VARCHAR" property="poemContent" />
    <result column="poemcol" jdbcType="VARCHAR" property="poemcol" />
    <result column="readNum" jdbcType="INTEGER" property="readNum" />
    <result column="likeNum" jdbcType="INTEGER" property="likeNum" />
    <result column="readCommentNum" jdbcType="INTEGER" property="readCommentNum" />
    <collection property="types" resultMap="LikesCollectionDtoResultMap"></collection>
    <collection property="typeDtos" resultMap="LikeCollectionTypeBaseResultMap"></collection>

  </resultMap>

  <resultMap id="PoemReadRecordDtoResultMap" type="com.poetry.pojo.Dto.PoemReadRecordDto">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="avata_path" jdbcType="VARCHAR" property="avataPath" />
    <result column="ueser_id" jdbcType="INTEGER" property="ueserId" />
    <result column="poem_id" jdbcType="INTEGER" property="poemId" />
    <result column="likes_num" jdbcType="INTEGER" property="likesNum" />
    <result column="audio_path" jdbcType="VARCHAR" property="audioPath" />
    <result column="time" jdbcType="TIMESTAMP" property="time" />
    <result column="read_record_commentNum" jdbcType="INTEGER" property="read_record_commentNum" />
    <result column="islike" jdbcType="INTEGER" property="isLike" />
  </resultMap>


  <sql id="Base_Column_List">
    id, dynasty, author, poem_content, poem_appreciation, poem_translation, poemcol
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from poem
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from poem
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.poetry.pojo.Do.poemDo">
    insert into poem (id, dynasty, author, 
      poem_content, poem_appreciation, poem_translation, 
      poemcol)
    values (#{id,jdbcType=INTEGER}, #{dynasty,jdbcType=VARCHAR}, #{author,jdbcType=VARCHAR}, 
      #{poemContent,jdbcType=VARCHAR}, #{poemAppreciation,jdbcType=VARCHAR}, #{poemTranslation,jdbcType=VARCHAR}, 
      #{poemcol,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.poetry.pojo.Do.poemDo">
    insert into poem
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="dynasty != null">
        dynasty,
      </if>
      <if test="author != null">
        author,
      </if>
      <if test="poemContent != null">
        poem_content,
      </if>
      <if test="poemAppreciation != null">
        poem_appreciation,
      </if>
      <if test="poemTranslation != null">
        poem_translation,
      </if>
      <if test="poemcol != null">
        poemcol,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="dynasty != null">
        #{dynasty,jdbcType=VARCHAR},
      </if>
      <if test="author != null">
        #{author,jdbcType=VARCHAR},
      </if>
      <if test="poemContent != null">
        #{poemContent,jdbcType=VARCHAR},
      </if>
      <if test="poemAppreciation != null">
        #{poemAppreciation,jdbcType=VARCHAR},
      </if>
      <if test="poemTranslation != null">
        #{poemTranslation,jdbcType=VARCHAR},
      </if>
      <if test="poemcol != null">
        #{poemcol,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.poetry.pojo.Do.poemDo">
    update poem
    <set>
      <if test="dynasty != null">
        dynasty = #{dynasty,jdbcType=VARCHAR},
      </if>
      <if test="author != null">
        author = #{author,jdbcType=VARCHAR},
      </if>
      <if test="poemContent != null">
        poem_content = #{poemContent,jdbcType=VARCHAR},
      </if>
      <if test="poemAppreciation != null">
        poem_appreciation = #{poemAppreciation,jdbcType=VARCHAR},
      </if>
      <if test="poemTranslation != null">
        poem_translation = #{poemTranslation,jdbcType=VARCHAR},
      </if>
      <if test="poemcol != null">
        poemcol = #{poemcol,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.poetry.pojo.Do.poemDo">
    update poem
    set dynasty = #{dynasty,jdbcType=VARCHAR},
      author = #{author,jdbcType=VARCHAR},
      poem_content = #{poemContent,jdbcType=VARCHAR},
      poem_appreciation = #{poemAppreciation,jdbcType=VARCHAR},
      poem_translation = #{poemTranslation,jdbcType=VARCHAR},
      poemcol = #{poemcol,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="getPeopleRegisterDto" resultMap="PeopleRegisterDtoBaseResultMap">
   select id ,dynasty, author,poem_content,poemcol from poem where id>= (select floor(max(id)*rand() ) from poem) ORDER BY id limit 1;
  </select>
  <select id="listPoemDto" resultMap="PoemDtoBaseResultMap">
SELECT p.id,p.dynasty,p.author,p.poem_content,p.poemcol,COUNT(DISTINCT rr.id) as readNum
,COUNT(DISTINCT lc.id) as likeNum
,COUNT(DISTINCT rrc.id) as readCommentNum
FROM
poem as p  LEFT JOIN read_record as rr on  p.id=rr.poem_id
LEFT JOIN likes_collect as lc on p.id=lc.poem_id and lc.type=#{1}
LEFT JOIN read_record_comment rrc ON rrc.read_record_id=rr.id
WHERE p.author LIKE CONCAT('%',#{0},'%')  GROUP BY p.id

union


SELECT p.id,p.dynasty,p.author,p.poem_content,p.poemcol,COUNT(DISTINCT rr.id) as readNum
,COUNT(DISTINCT lc.id) as likeNum
,COUNT(DISTINCT rrc.id) as readCommentNum
FROM
poem as p  LEFT JOIN read_record as rr on  p.id=rr.poem_id
LEFT JOIN likes_collect as lc on p.id=lc.poem_id and lc.type=#{1}
LEFT JOIN read_record_comment rrc ON rrc.read_record_id=rr.id
WHERE p.poem_content LIKE concat('%',#{0},'%')   GROUP BY p.id


union


SELECT p.id,p.dynasty,p.author,p.poem_content,p.poemcol,COUNT(DISTINCT rr.id) as readNum
,COUNT(DISTINCT lc.id) as likeNum
,COUNT(DISTINCT rrc.id) as readCommentNum
FROM
poem as p  LEFT JOIN read_record as rr on  p.id=rr.poem_id
LEFT JOIN likes_collect as lc on p.id=lc.poem_id and lc.type=#{1}
LEFT JOIN read_record_comment rrc ON rrc.read_record_id=rr.id
WHERE p.poemcol LIKE concat('%',#{0},'%')   GROUP BY p.id


  </select>

  <select id="getPoemTypeDto" resultMap="PoemTypeDtoResultMap">

    SELECT p.id,p.dynasty,p.author,p.poem_content,p.poemcol,COUNT(DISTINCT rr.id) as readNum
,COUNT(DISTINCT lc.id) as likeNum
,COUNT(DISTINCT rrc.id) as readCommentNum
,pt.poem_type_name
,pt.id as poem_type_id
FROM
poem as p  LEFT JOIN read_record as rr on  p.id=rr.poem_id
LEFT JOIN likes_collect as lc on p.id=lc.poem_id and lc.type="点赞"
LEFT JOIN read_record_comment rrc ON rrc.read_record_id=rr.id
LEFT JOIN  poem_poem_type ptt on p.id=ptt.poem_id
LEFT JOIN poem_type pt ON pt.id=ptt.poem_type_id
WHERE pt.id=#{0}  GROUP BY p.id




  </select>

<select id="getPoemLikeCollectionDto" resultMap="PoemLikeCollectionDtoResultMap">


SELECT lc.pid as id,lc.author,lc.dynasty,lc.poemcol,lc.poem_appreciation,lc.poem_content,lc.poem_translation, p.type ,lc.c as typeNum ,lc.type as typeNumName
FROM(
SELECT p.id as pid ,p.author,p.dynasty,p.poemcol,p.poem_appreciation,p.poem_content,p.poem_translation,COUNT(likes_collect.type)as c , likes_collect.type ,likes_collect.poem_id as lcpoem_id
FROM poem p
LEFT JOIN likes_collect
on   likes_collect.poem_id=p.id
WHERE  p.id=#{1}
GROUP BY likes_collect.type

)lc LEFT  JOIN  (

SELECT likes_collect.poem_id as id, likes_collect.type as type,likes_collect.id as likes_collect_id
FROM
 likes_collect
WHERE    likes_collect.ueser_id=#{0}
)p on p.id=lc.pid AND p.type=lc.type
GROUP BY lc.type

</select>


  <select id="listPoemReadRecordDtoResultMap" resultMap="PoemReadRecordDtoResultMap">
SELECT read_record.id, read_record.time,read_record.audio_path,read_record.likes_num,u.avata_path,u.id as ueserId,u.user_name ,COUNT(DISTINCT read_record_comment.id) as read_record_commentNum
, COUNT(DISTINCT rrl.id) as islike
FROM
poem
LEFT JOIN read_record on poem.id=read_record.poem_id
LEFT JOIN `user` u on u.id=read_record.ueser_id
LEFT JOIN read_record_comment on read_record.id=read_record_comment.read_record_id
LEFT JOIN read_record_like rrl on rrl.read_record_id=read_record.id and u.id=#{1}
WHERE poem_id=#{0} GROUP BY read_record.id


  </select>

</mapper>